// Variables for quiz initialzation
var quizScore = 0;
var answers;

//Selectors for HTML elements
var quizQuestion = document.querySelector(".quiz-question");
var quizChoice = document.querySelectorAll(".quiz-choice");
// Start quiz button functionality
var startButton = document.querySelector("#start");
startButton.addEventListener("click", loadQuestion);


// Declare questions and answers as an array with object literals, with values for questions and answers
const breadQuestions = [
    {
        question: "Which of the following statements about gluten is false:",
        // Answers are used as an array for future methods, as well as adding innerHTML data
        answers: [
            "<p data-state='incorrect'>Gluten proteins makes up 75%-85% of the total protein in bread wheat.</p>", 
            "<p data-state='correct'>Rye grain does not contain any glutenin proteins.</p>", 
            "<p data-state='incorrect'>Wheat gluten is primarly composed of two types of proteins, glutenins and gliadins.</p>", 
            "<p data-state='incorrect'>Imitation meat products often use gluten as part of their ingredient list.</p>"
        ]
    },
    {
        question: "In regards to bread terminology, alveoli refers to:",
        answers: [
            "<p data-state='correct'>Air pockets in bread generated by gases from yeast and bacteria.</p>",
            "<p data-state='incorrect'>An organism that can be found in a sourdough culture.</p>",
            "<p data-state='incorrect'>A special type of protein besides glutenin and gliadins.</p>",
            "<p data-state='incorrect'>The phenomenon where gluten structure breaks down due to overfermentation.</p>"
        ]
    }
]

// Declare variable for question number
var quizProgress = 0;

// Function to increment score
function incrementScore(){
    quizScore++;
}

// Function to compare question to answer
function compareAnswer(q, a){
    if (q === a){
        alert("That's right!");
        incrementScore();
    } else {
        alert("Incorrect!");
    }
}

// Answer comparison logic
// Firstly, we declare variables for the question's "data-state" attribute, which should always be ="correct"
// Since var quizChoice is an array (due to the .querySelectorAll method), the choice parameter in the function lets us compare which choice index to grab data from (0-3).
// Because we've set up the "data-state" value in a <p> tag in the answers array in breadQuestions, we have to use the .firstElementChild ParentNode method (selects the child), then we can get the attribute of "data-state" for that answer.
// Finally, we run compareAnswer to compare "data-state" values of both the question and selected answer.
function answerValidation(choice){
    var questionState = quizQuestion.getAttribute("data-state");
    var chosenAnswer = quizChoice[choice].firstElementChild.getAttribute("data-state");
    compareAnswer(questionState, chosenAnswer);
}

// Function to put the question into the webpage
function loadQuestion(){
    // Function to shuffle answers, ASSUMING that we set up the questions object literal like the example we've done above.
    // Parameters: ans refers to the object where the question+answers are stored, num refers to the index of which question+answers set we pull from.
    // ans[num].answers gives us ONLY the answers from the question+answers set, which then get shuffled using .sort() and a Math.random() function.
    // Important note, this isn't a super great method for shuffling since it does have some biases, but works for our usage.
    function shuffleAnswers(ans, num){
        var shuffleArray = ans[num].answers
        return shuffleArray.sort(() => Math.random() - 0.5);
    }

    // Function to build the question
    function buildQuestion(questNum){
        var genQuestion = breadQuestions[questNum].question;
        answers = shuffleAnswers(breadQuestions, questNum);
        quizQuestion.textContent = genQuestion;
        // For loop to replace all the .quiz-choice classes.
        // innerHTML is used here instead of textContent because we want to set the data-state for answer comparison.
        for (var i = 0; i < 4; i++){
            quizChoice[i].innerHTML = answers[i];
        } 
    }
    // Call buildQuestion(), which uses quizProgress to pull the question number, then increment question number
    buildQuestion(quizProgress);
    quizProgress++;
}